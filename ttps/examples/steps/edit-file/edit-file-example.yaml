---
name: edit-file-example
description: edits a file in various ways
args:
  - name: target_file_path
    default: /tmp/edit-file-example-target
steps:
  - name: create-target-file
    create_file: {{ .Args.target_file_path }}
    overwrite: true
    cleanup: false
    contents: |
      This is an example file.

      The TTP will replace the string below:

      REPLACE_ME

      It will also delete the multi-line string below and replace
      it with a comment:


      result = await myclass.multi_line_function_call(
        param1,
        param2,
      )

      Finally, it will comment out the line below using a C-Style /* ... */ comment.

      another_multline_function_call(
        param1,
        param2,
      )
  - name: edit-target-file
    edit_file: {{ .Args.target_file_path }}
    backup_file: "/tmp/my-backup.txt"
    edits:
      - old: REPLACE_ME
        new: REPLACED_BY_EDIT # replace all instances of REPLACE_ME with REPLACED_BY_EDIT
      - old: (?ms:^result = await myclass\.multi_line_function_call\(.*?\)$) # golang format regexp
        new: "# replaced with comment" # replace all matching lines with this string
        regexp: true # specify use of regexp rather than literal matches
      - old: (?P<fn_call>(?ms:^another_multline_function_call\(.*?\)$))
        new: "/*${fn_call}*/" # use backreferences to prefix the original line with a comment
        regexp: true
    cleanup: false # whether you want the original file restored from the backup automatically
  - name: view-edited-file
    inline:  cat {{ .Args.target_file_path }}
      
    