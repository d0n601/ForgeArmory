---
name: brute-force-iam-permissions
description: Determine what permissions an IAM role has through brute force.
args:
  - name: detect
  - name: provision
  - name: extended-scan
steps:
  - name: ensure-aws-creds-present
    inline: |
      set -e
      if [[ -z "${AWS_DEFAULT_REGION}" ]]; then
        echo "error: AWS_DEFAULT_REGION must be set."
        exit 1
      fi
      if [[ -n "${AWS_ACCESS_KEY_ID}" && -n "${AWS_SECRET_ACCESS_KEY}" ]]; then
        if [[ -z "${AWS_SESSION_TOKEN}" ]]; then
          echo "warning: AWS_SESSION_TOKEN is not set with AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY."
        fi
      elif [[ -z "${AWS_PROFILE}" ]]; then
        echo "error: AWS credentials are not set, exiting."
        exit 1
      fi

  - name: ensure-aws-cli-present
    inline: |
      set -e
      if ! [ -x "$(command -v aws)" ]; then
        echo 'error: AWS CLI is not installed.' >&2
      else
        echo 'AWS CLI is installed.'
        aws --version
      fi

  - name: provision
    inline: |
      set -e
      if [[ "{{args.provision}}" == true ]]; then
        if [[ -d "/tmp/enumerate-iam" ]]; then
          echo -e "The directory /tmp/enumerate-iam already exists. The repo might have already been cloned."
        else
          git clone https://github.com/andresriancho/enumerate-iam.git /tmp/enumerate-iam
          if [[ "{{args.extended-scan}}" == true ]]; then
            # Get latest APIs
            echo -e "Extended scan specified - getting latest AWS API endpoints"
            git clone https://github.com/aws/aws-sdk-js.git /tmp/enumerate-iam/enumerate_iam/aws-sdk-js

            pushd /tmp/enumerate-iam/enumerate_iam || exit 1
            python3 generate_bruteforce_tests.py
            popd || exit 1
          fi

          # Fix hanging issue bug (https://github.com/andresriancho/enumerate-iam/pull/15/commits/77ad5b41216e3b5f1511d0c385da8cd5984c2d3c)
          sed -i"" -e "s/'max_attempts': 30/'max_attempts': 3/" /tmp/enumerate-iam/enumerate_iam/main.py

          # Install required pip packages
          pushd /tmp/enumerate-iam || exit 1
          python3 -m pip install -r requirements.txt
          popd || exit 1
        fi
      fi

  - name: run-enumerate-iam
    inline: |
      set -e
      pushd /tmp/enumerate-iam || exit 1
      if [[ -n "${AWS_PROFILE}" ]]; then
        # AWS_PROFILE is set, extract credentials from AWS profile
        export AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id --profile "${AWS_PROFILE}")
        export AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key --profile "${AWS_PROFILE}")
        export AWS_SESSION_TOKEN=$(aws configure get aws_session_token --profile "${AWS_PROFILE}")
      fi

      if [[ -n "${AWS_ACCESS_KEY_ID}" && -n "${AWS_SECRET_ACCESS_KEY}" ]]; then
        if [[ -z "${AWS_SESSION_TOKEN}" ]]; then
          echo "warning: AWS_SESSION_TOKEN is not set with AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY."
          python3 enumerate-iam.py --access-key "${AWS_ACCESS_KEY_ID}" --secret-key "${AWS_SECRET_ACCESS_KEY}"
        else
          python3 enumerate-iam.py --access-key "${AWS_ACCESS_KEY_ID}" --secret-key "${AWS_SECRET_ACCESS_KEY}" --session-token "${AWS_SESSION_TOKEN}"
        fi
      fi
      popd || exit 1

  - name: check-detection
    inline: |
      set -e

      if [[ "{{args.detect}}" == true ]]; then
        current_time() {
          date -u +'%Y-%m-%dT%H:%M:%SZ'
        }

        ten_minutes_ago() {
          if [[ "$OSTYPE" == "darwin"* ]]; then
            date -v-10M -u +'%Y-%m-%dT%H:%M:%SZ'
          else
            date -u -d '10 minutes ago' +'%Y-%m-%dT%H:%M:%SZ'
          fi
        }

        # Define a time window for CloudTrail lookup
        START_TIME=$(ten_minutes_ago)
        END_TIME=$(current_time)

        # Non-exhaustive list of API calls to look for
        API_CALLS=("ListUsers" "ListGroups" "ListRoles")

        for api_call in "${API_CALLS[@]}"; do
          EVENTS=$(aws cloudtrail lookup-events \
            --lookup-attributes AttributeKey=EventName,AttributeValue=$api_call \
            --start-time $START_TIME --end-time $END_TIME)

          # Check if api_call event exists in the events
          if echo "$EVENTS" | jq -e '.Events[] | select(.EventName=="'$api_call'")' > /dev/null; then
            # Count the number of events from each IP address
            COUNTS=$(echo "$EVENTS" | jq -r '.Events[] | .SourceIPAddress' | sort | uniq -c)

            # Set a threshold for alerting (e.g., more than 5 events from the same IP address)
            THRESHOLD=5

            while read -r count ip; do
              if (( count > THRESHOLD )); then
                echo "Possible IAM enumeration detected from $ip with $count $api_call events in the last 10 minutes"
              fi
            done <<< "$COUNTS"
          else
            echo "No $api_call event detected in the last 10 minutes"
          fi
        done
      fi
